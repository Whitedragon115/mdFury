// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(cuid())
  username             String?    @unique // Make optional for OAuth users
  email                String     @unique
  emailVerified        DateTime?  // Required by NextAuth
  name                 String?    // Required by NextAuth (mapped to displayName)
  image                String?    // Required by NextAuth (mapped to profileImage)
  password             String?    // Make optional for OAuth users
  displayName          String?
  profileImage         String?
  language             String     @default("en")
  theme                String     @default("dark") // 'light' | 'dark' | 'system'
  backgroundImage      String?
  backgroundBlur       Int        @default(0)
  backgroundBrightness Int        @default(70)
  backgroundOpacity    Float      @default(0.1)
  apiToken             String?    @unique // API token for API access
  createdAt            DateTime   @default(now())
  lastLogin            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relations
  markdowns Markdown[]
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Markdown {
  id        String   @id @default(cuid())
  binId     String   @unique // Custom bin ID for routing
  title     String
  content   String   @db.LongText
  tags      String?  // JSON array as string
  isPublic  Boolean  @default(true)
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("markdowns")
}
